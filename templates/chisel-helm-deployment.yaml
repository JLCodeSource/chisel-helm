apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chisel-helm.fullname" . }}
  labels:
{{ include "chisel-helm.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "chisel-helm.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "chisel-helm.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}  
        volumeMounts:
        - name: tls
          mountPath: "/opt"
          readOnly: true       
        ports:
        {{ range .Values.service.ports }}
        - containerPort: {{ .internalPort }}
          protocol: {{ .protocol | quote }}
        {{- end }}
        env:
        - name: TYPE
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-chisel-configmap
              key: type
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-chisel-configmap
              key: port
        - name: PROXY
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-chisel-configmap
              key: proxy
        - name: SOCKS
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-chisel-configmap
              key: socks
        - name: REVERSE
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-chisel-configmap
              key: reverse
        - name: UPSTREAM
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-chisel-configmap
              key: upstream
        {{- if .Values.chisel.tls.enabled }}
        - name: TLS-CERT-FLAG
          value: "--tls-cert-file"
        - name: TLS-CERT-FILE
          value: "/opt/tls.crt"
        - name: TLS-KEY-FLAG
          value: "--tls-key-file"
        - name: TLS-KEY-FILE
          value: "/opt/tls.key"
        {{- else  }}
        - name: TLS-CERT-FLAG
          value: ""
        - name: TLS-CERT-FILE
          value: ""
        - name: TLS-KEY-FLAG
          value: ""
        - name: TLS-KEY-FILE
          value: ""
        {{- end }}
        command: ["/app/chisel"]
        args:
         - "$(TYPE)"
         - "-v"
         - "-p"
         - "$(PORT)"
         - "$(SOCKS)"
         - "$(REVERSE)"
         - "$(UPSTREAM)"
         - "$(TLS-CERT-FLAG)"
         - "$(TLS-CERT-FILE)"
         - "$(TLS-KEY-FLAG)"
         - "$(TLS-KEY-FILE)"
        readinessProbe:
          tcpSocket:
            port: {{ .Values.chisel.port }}
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: {{ .Values.chisel.port }}
          initialDelaySeconds: 15
          periodSeconds: 20          
        resources:
        {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.chisel.tls.enabled }}
      volumes:
      - name: tls
        secret:
          secretName: {{ .Values.chisel.tls.secretName }}
          defaultMode: 256
      {{- end }}
      {{- with .Values.nodeSelector }}   
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
